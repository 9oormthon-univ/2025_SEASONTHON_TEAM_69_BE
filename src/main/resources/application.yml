spring:
  application:
    name: hackathon
  datasource:
    url: ${DB_URL}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      # 풀에 잡히는 모든 커넥션이 KST 세션으로 시작
      connectionInitSql: SET time_zone = '+09:00'
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        # Hibernate가 JDBC 바인딩/언바인딩할 때도 KST로
        jdbc.time_zone: Asia/Seoul
  jackson:
    time-zone: Asia/Seoul
  cloud:
    aws:
      s3:
        bucket: ${CLOUD_AWS_S3_BUCKET}
      credentials:
        access-key: ${CLOUD_AWS_CREDENTIALS_ACCESS-KEY}
        secret-key: ${CLOUD_AWS_CREDENTIALS_SECRET-KEY}
      region:
        static: ${CLOUD_AWS_REGION_STATIC}

app:
  jwt:
    issuer: "TrioGraphy"
    secret: "31a9bad0f91de7ca8fd3fede3f48c527f74f696300b8b28cc37682f6795fa952"
    access-ttl-seconds: 900
    refresh-ttl-seconds: 1209600

server:
  port: 8080
  address: 0.0.0.0

kakao:
  userinfo-uri: "https://kapi.kakao.com/v2/user/me"

ollama:
  base-url: ${OLLAMA_BASE_URL}
  model: ${OLLAMA_MODEL}

openai:
  api:
    url: ${OPENAI_API_URL:https://api.openai.com/v1/chat/completions}
    key: ${OPENAI_API_KEY:dummy}


#카카오 소셜 로그인 과정에서 액세스 토큰으로 사용자 정보를 조회할 때 쓰는 REST API 엔드포인트.
#
#구현 플로우 예시
#1. 프런트엔드에서 카카오 SDK 혹은 OAuth 토큰 엔드포인트로 로그인 진행
#2. 로그인 성공 후 발급된 액세스 토큰을 프런트엔드에서 받아 서버(백엔드)로 전송
#3. 백엔드에서 HTTP GET 요청으로  호출 - 헤더에 Authorization: Bearer {access_token} 포함
#4. 카카오가 반환한 사용자 ID, 이메일, 프로필 정보 등을 이용해 자체 회원 DB에 로그인·회원가입 처리

logging.level:
  org.hibernate.sql: debug
  hello.hackathon: debug
